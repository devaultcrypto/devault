---
name: "devault-linux"
enable_cache: true
distro: "debian"
suites:
- "bionic"
architectures:
- "amd64"
multiarch:
- "i386"
packages:
- "autoconf"
- "automake"
- "binutils-aarch64-linux-gnu"
- "binutils-arm-linux-gnueabihf"
- "binutils-gold"
- "bsdmainutils"
- "build-essential"
- "ca-certificates"
- "cmake"
- "curl"
- "faketime"
- "g++-aarch64-linux-gnu"
- "g++-arm-linux-gnueabihf"
- "gcc-aarch64-linux-gnu"
- "gcc-arm-linux-gnueabihf"
- "git"
- "gperf"
- "lib32stdc++-8-dev"
- "libc6-dev:i386"
- "libtool"
- "ninja-build"
- "pkg-config"
- "python3"
- "libgmp-dev"
- "libsodium-dev"
# FIXME: these dependencies are only required to make CMake happy when building
# native tools. They can be removed when the `NativeExecutable.cmake` gets
# improved to avoid requiring all the devault dependencies.
- "libboost-all-dev"
- "libevent-dev"
- "libssl-dev"
remotes:
- "url": "https://github.com/devaultcrypto/devault.git"
  "dir": "devault"
files: []
script: |

  WRAP_DIR=$HOME/wrapped
  HOSTS="i686-pc-linux-gnu x86_64-linux-gnu arm-linux-gnueabihf aarch64-linux-gnu"

  # CMake toolchain file name differ from host name
  declare -A CMAKE_TOOLCHAIN_FILE
  CMAKE_TOOLCHAIN_FILE[i686-pc-linux-gnu]=Linux32.cmake
  CMAKE_TOOLCHAIN_FILE[x86_64-linux-gnu]=Linux64.cmake
  CMAKE_TOOLCHAIN_FILE[arm-linux-gnueabihf]=LinuxARM.cmake
  CMAKE_TOOLCHAIN_FILE[aarch64-linux-gnu]=LinuxAArch64.cmake

  INSTALL_COMPONENTS="bitcoind bitcoin-qt bitcoin-seeder"

  FAKETIME_HOST_PROGS=""
  FAKETIME_PROGS="date ar ranlib nm"
  HOST_CFLAGS="-O2 -g"
  HOST_CXXFLAGS="-O2 -g"
  HOST_LDFLAGS=-static-libstdc++

  export QT_RCC_TEST=1
  export QT_RCC_SOURCE_DATE_OVERRIDE=1
  export GZIP="-9n"
  export TAR_OPTIONS="--mtime="$REFERENCE_DATE\\\ $REFERENCE_TIME""
  export TZ="UTC"
  export BUILD_DIR=`pwd`
  mkdir -p ${WRAP_DIR}
  if test -n "$GBUILD_CACHE_ENABLED"; then
    export SOURCES_PATH=${GBUILD_COMMON_CACHE}
    export BASE_CACHE=${GBUILD_PACKAGE_CACHE}
    mkdir -p ${BASE_CACHE} ${SOURCES_PATH}
  fi

  function create_global_faketime_wrappers {
  for prog in ${FAKETIME_PROGS}; do
    echo '#!/usr/bin/env bash' > ${WRAP_DIR}/${prog}
    echo "REAL=\`which -a ${prog} | grep -v ${WRAP_DIR}/${prog} | head -1\`" >> ${WRAP_DIR}/${prog}
    echo 'export LD_PRELOAD=/usr/lib/x86_64-linux-gnu/faketime/libfaketime.so.1' >> ${WRAP_DIR}/${prog}
    echo "export FAKETIME=\"$1\"" >> ${WRAP_DIR}/${prog}
    echo "\$REAL \$@" >> $WRAP_DIR/${prog}
    chmod +x ${WRAP_DIR}/${prog}
  done
  }

  function create_per-host_faketime_wrappers {
  for i in $HOSTS; do
    for prog in ${FAKETIME_HOST_PROGS}; do
        echo '#!/usr/bin/env bash' > ${WRAP_DIR}/${i}-${prog}
        echo "REAL=\`which -a ${i}-${prog} | grep -v ${WRAP_DIR}/${i}-${prog} | head -1\`" >> ${WRAP_DIR}/${i}-${prog}
        echo 'export LD_PRELOAD=/usr/lib/x86_64-linux-gnu/faketime/libfaketime.so.1' >> ${WRAP_DIR}/${i}-${prog}
        echo "export FAKETIME=\"$1\"" >> ${WRAP_DIR}/${i}-${prog}
        echo "\$REAL \$@" >> $WRAP_DIR/${i}-${prog}
        chmod +x ${WRAP_DIR}/${i}-${prog}
    done
  done
  }

  # Faketime for depends so intermediate results are comparable
  export PATH_orig=${PATH}
  create_global_faketime_wrappers "2000-01-01 12:00:00"
  create_per-host_faketime_wrappers "2000-01-01 12:00:00"
  export PATH=${WRAP_DIR}:${PATH}

  cd devault
  SOURCEDIR=`pwd`
  BASEPREFIX=`pwd`/depends
  # Build dependencies for each host
  for i in $HOSTS; do
    make ${MAKEOPTS} -C ${BASEPREFIX} HOST="${i}"
  done

  # Faketime for binaries
  export PATH=${PATH_orig}
  create_global_faketime_wrappers "${REFERENCE_DATETIME}"
  create_per-host_faketime_wrappers "${REFERENCE_DATETIME}"
  export PATH=${WRAP_DIR}:${PATH}

  mkdir -p source_package
  pushd source_package
  cmake -GNinja .. \
    -DBUILD_BITCOIN_WALLET=OFF \
    -DBUILD_BITCOIN_ZMQ=OFF \
    -DBUILD_BITCOIN_SEEDER=OFF \
    -DBUILD_BITCOIN_CLI=OFF \
    -DBUILD_BITCOIN_TX=OFF \
    -DBUILD_BITCOIN_QT=OFF \
    -DBUILD_LIBBITCOINCONSENSUS=OFF \
    -DENABLE_CLANG_TIDY=OFF \
    -DENABLE_QRCODE=OFF \
    -DENABLE_UPNP=OFF

  ninja package_source
  SOURCEDIST=`echo devault-*.tar.gz`
  mv ${SOURCEDIST} ..
  popd
  DISTNAME=`echo ${SOURCEDIST} | sed 's/.tar.*//'`
  # Correct tar file order
  mkdir -p temp
  pushd temp
  tar xf ../$SOURCEDIST
  find devault-* | sort | tar --no-recursion --mode='u+rw,go+r-w,a+X' --owner=0 --group=0 -c -T - | gzip -9n > ../$SOURCEDIST
  popd

  ORIGPATH="$PATH"
  # Extract the release tarball into a dir for each host and build
  for i in ${HOSTS}; do
    export PATH=${BASEPREFIX}/${i}/native/bin:${ORIGPATH}
    mkdir -p distsrc-${i}
    cd distsrc-${i}
    INSTALLPATH=`pwd`/installed/${DISTNAME}
    mkdir -p ${INSTALLPATH}
    tar --strip-components=1 -xf ../$SOURCEDIST

    cmake -GNinja .. \
      -DCMAKE_TOOLCHAIN_FILE=${SOURCEDIR}/cmake/platforms/${CMAKE_TOOLCHAIN_FILE[${i}]} \
      -DCLIENT_VERSION_IS_RELEASE=ON \
      -DENABLE_CLANG_TIDY=OFF \
      -DENABLE_REDUCE_EXPORTS=ON \
      -DENABLE_STATIC_LIBSTDCXX=ON \
      -DENABLE_GLIBC_BACK_COMPAT=ON \
      -DCMAKE_INSTALL_PREFIX=${INSTALLPATH} \
      -DCCACHE=OFF

    ninja
    ninja check-security
    ninja check-symbols

    for _component in ${INSTALL_COMPONENTS}; do
       cmake -DCOMPONENT=${_component} -P cmake_install.cmake
    done

    cd installed
    find ${DISTNAME}/bin -type f -executable -exec ../contrib/devtools/split-debug.sh {} {} {}.dbg \;
    find ${DISTNAME}/lib -type f -exec ../contrib/devtools/split-debug.sh {} {} {}.dbg \;
    find ${DISTNAME} -not -name "*.dbg" | sort | tar --no-recursion --mode='u+rw,go+r-w,a+X' --owner=0 --group=0 -c -T - | gzip -9n > ${OUTDIR}/${DISTNAME}-${i}.tar.gz
    find ${DISTNAME} -name "*.dbg" | sort | tar --no-recursion --mode='u+rw,go+r-w,a+X' --owner=0 --group=0 -c -T - | gzip -9n > ${OUTDIR}/${DISTNAME}-${i}-debug.tar.gz
    cd ../../
    rm -rf distsrc-${i}
  done
  mkdir -p $OUTDIR/src
  mv $SOURCEDIST $OUTDIR/src